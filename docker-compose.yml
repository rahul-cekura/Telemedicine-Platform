version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: telemedicine-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: telemedicine_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - telemedicine-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: telemedicine-server
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: telemedicine_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-development}
      CORS_ORIGIN: http://localhost,http://localhost:3000,http://localhost:80
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    depends_on:
      db:
        condition: service_healthy
    networks:
      - telemedicine-network

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: telemedicine-client
    restart: unless-stopped
    ports:
      - "80:80"
      - "3000:80"
    depends_on:
      - server
    networks:
      - telemedicine-network
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_SOCKET_URL: http://localhost:5000

networks:
  telemedicine-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
